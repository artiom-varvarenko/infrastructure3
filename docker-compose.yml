version: '3.8'

services:
  # Reverse Proxy - Caddy (replace 'jd' with your initials)
  jd-proxy:
    image: caddy:alpine
    container_name: jd-proxy-container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - jd-caddy-data:/data
      - jd-caddy-config:/config
    networks:
      - jd-frontend-network
    depends_on:
      - jd-webapp
      - jd-api
    restart: unless-stopped

  # Web Application (replace 'jd' with your initials)
  jd-webapp:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: jd-webapp-container
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=jd-postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - PORT=3000
    networks:
      - jd-frontend-network
      - jd-backend-network
    depends_on:
      - jd-postgres
    restart: unless-stopped

  # API Service (replace 'jd' with your initials)
  jd-api:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: jd-api-container
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=jd-postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - PORT=4000
    networks:
      - jd-frontend-network
      - jd-backend-network
    depends_on:
      - jd-postgres
    restart: unless-stopped

  # PostgreSQL Database (replace 'jd' with your initials)
  jd-postgres:
    image: postgres:15-alpine
    container_name: jd-postgres-container
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - jd-postgres-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jd-backend-network
    restart: unless-stopped

networks:
  jd-frontend-network:
    driver: bridge
    name: jd-frontend-net
  jd-backend-network:
    driver: bridge
    name: jd-backend-net

volumes:
  jd-postgres-data:
  jd-caddy-data:
  jd-caddy-config: